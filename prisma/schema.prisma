// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio                String?   @db.Text
  location           String?
  website            String?
  cookingExperience  String?   // "beginner", "intermediate", "advanced", "professional"
  favoritesCuisines  String?   @db.Text // JSON array of favorite cuisines
  dietaryRestrictions String?  @db.Text // JSON array of dietary restrictions
  profilePicture     String?   @db.Text // URL to profile picture
  isPublicProfile    Boolean   @default(true)
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  recipes Recipe[]
  ratings Rating[]
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  instructions String  @db.Text // Markdown content
  imageUrl    String?  @db.Text // Changed to TEXT to support long URLs
  prepTime    Int?     // in minutes
  cookTime    Int?     // in minutes
  servings    Int?
  published   Boolean  @default(false) // Recipes are private by default
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredient[]
  ratings     Rating[]

  @@index([userId])
  @@index([createdAt])
  @@index([published])
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes      RecipeIngredient[]
  translations IngredientTranslation[]
}

model RecipeIngredient {
  id           String @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  unit         String // e.g., "cups", "grams", "pieces"

  // Relations
  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
}

model IngredientTranslation {
  id           String @id @default(cuid())
  ingredientId String
  locale       String // e.g., "en", "fr", "es"
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([ingredientId, locale])
}

model Rating {
  id       String @id @default(cuid())
  value    Int    // 1-5 stars
  recipeId String
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId]) // One rating per user per recipe
}
